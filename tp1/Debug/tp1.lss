
tp1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000787  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000699  00000000  00000000  00000973  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bd  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000382  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00001672  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001726  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include <stdio.h>

int main(void)
{
	DDRD = 0xff;//configuro el PORTB para todo salida
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	int aux = 0;// inicializo variable auxiliar
	DDRC = 0b11111110;//configuro el pin0 del port C para entrada
  84:	8e ef       	ldi	r24, 0xFE	; 254
  86:	87 b9       	out	0x07, r24	; 7
	PORTC = 1<<PINC0;//activo resitencia pull-up
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	88 b9       	out	0x08, r24	; 8
	PORTD = 1<<PINC0;//inicializo PORTB
  8c:	8b b9       	out	0x0b, r24	; 11
#include <stdio.h>

int main(void)
{
	DDRD = 0xff;//configuro el PORTB para todo salida
	int aux = 0;// inicializo variable auxiliar
  8e:	20 e0       	ldi	r18, 0x00	; 0
  90:	30 e0       	ldi	r19, 0x00	; 0
				if ((PORTD & (1<<PINC0)) == 0 )//no llego al final de la secuencia
				{
					PORTD = PORTD>>1;//desplazo el valor del portB a la derecha
				}else//llego al final de la secuencia
				{
					PORTD= 0b10000000;//reinicializo el valor del port B
  92:	40 e8       	ldi	r20, 0x80	; 128
				if ((PORTD & (1<<PIND7)) == 0 )//no llego al final de la secuencia
				{
					PORTD = PORTD<<1;//desplazo el valor del portB a la izquierda
				}else//llego al final de la secuencia
				{
					PORTD= 0b00000001;//reinicializo el valor del port B
  94:	51 e0       	ldi	r21, 0x01	; 1
	DDRC = 0b11111110;//configuro el pin0 del port C para entrada
	PORTC = 1<<PINC0;//activo resitencia pull-up
	PORTD = 1<<PINC0;//inicializo PORTB
	while (1)
	{
		if ((PINC & (1<<PINC0)) == 0)//si hay un cero en el bit 0 del PINC (boton presionado)
  96:	30 99       	sbic	0x06, 0	; 6
  98:	11 c0       	rjmp	.+34     	; 0xbc <main+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f e3       	ldi	r24, 0x3F	; 63
  9c:	9c e9       	ldi	r25, 0x9C	; 156
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x1e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x24>
  a4:	00 00       	nop
		{
			_delay_ms(20);//retardo para contrarrestar el efecto rebote
			while ((PINC & (1<<PINC0)) == 0)//mientras siga en cero (hasta que se suelte el boton)
  a6:	30 9b       	sbis	0x06, 0	; 6
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <main+0x26>
  aa:	8f e3       	ldi	r24, 0x3F	; 63
  ac:	9c e9       	ldi	r25, 0x9C	; 156
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x2e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x34>
  b4:	00 00       	nop
			{
			}
			_delay_ms(20);//retardo para contrarrestar el efecto rebote
			aux= aux+1;//incremento variable auxiliar para conocer el sentido de la secuencia
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	ed cf       	rjmp	.-38     	; 0x96 <main+0x16>
		}else
		{
			if (aux % 2 == 1)//si estoy en la secuencia hacia la izquierda
  bc:	c9 01       	movw	r24, r18
  be:	81 70       	andi	r24, 0x01	; 1
  c0:	90 78       	andi	r25, 0x80	; 128
  c2:	99 23       	and	r25, r25
  c4:	24 f4       	brge	.+8      	; 0xce <main+0x4e>
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	8e 6f       	ori	r24, 0xFE	; 254
  ca:	9f 6f       	ori	r25, 0xFF	; 255
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	41 f4       	brne	.+16     	; 0xe2 <main+0x62>
			{
				if ((PORTD & (1<<PIND7)) == 0 )//no llego al final de la secuencia
  d2:	5f 99       	sbic	0x0b, 7	; 11
  d4:	04 c0       	rjmp	.+8      	; 0xde <main+0x5e>
				{
					PORTD = PORTD<<1;//desplazo el valor del portB a la izquierda
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	88 0f       	add	r24, r24
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <main+0x70>
				}else//llego al final de la secuencia
				{
					PORTD= 0b00000001;//reinicializo el valor del port B
  de:	5b b9       	out	0x0b, r21	; 11
  e0:	07 c0       	rjmp	.+14     	; 0xf0 <main+0x70>
				}
			}else //si estoy en la secuencia hacia la derecha
			{
				if ((PORTD & (1<<PINC0)) == 0 )//no llego al final de la secuencia
  e2:	58 99       	sbic	0x0b, 0	; 11
  e4:	04 c0       	rjmp	.+8      	; 0xee <main+0x6e>
				{
					PORTD = PORTD>>1;//desplazo el valor del portB a la derecha
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	86 95       	lsr	r24
  ea:	8b b9       	out	0x0b, r24	; 11
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <main+0x70>
				}else//llego al final de la secuencia
				{
					PORTD= 0b10000000;//reinicializo el valor del port B
  ee:	4b b9       	out	0x0b, r20	; 11
  f0:	9f ef       	ldi	r25, 0xFF	; 255
  f2:	63 e2       	ldi	r22, 0x23	; 35
  f4:	84 ef       	ldi	r24, 0xF4	; 244
  f6:	91 50       	subi	r25, 0x01	; 1
  f8:	60 40       	sbci	r22, 0x00	; 0
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x76>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x80>
 100:	00 00       	nop
 102:	c9 cf       	rjmp	.-110    	; 0x96 <main+0x16>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
